# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: My first github action

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'
    - run: yarn install
    - run: yarn build

  test:

    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    - name: Run unit tests
      run: yarn test
    - name: Run e2e tests
      run: yarn test:e2e
    - name: reporting test results
  # You may pin to the exact commit or the version.
  # uses: mikepenz/action-junit-report@5f47764eec0e1c1f19f40c8e60a5ba47e47015c5
  uses: mikepenz/action-junit-report@v4.1.0
  with:
    # Specify the token to use to publish the check.
    token: # optional, default is ${{ github.token }}
    # Deprecated syntax to specify github token.
    github_token: # optional
    # Xml report paths in glob format
    report_paths: # optional, default is **/junit-reports/TEST-*.xml
    # Prefix to add to test file paths from report files when annotating
    test_files_prefix: # optional, default is 
    # Comma seperated list of source folders to ignore for lookup
    exclude_sources: # optional
    # Regular expression for the named test suites
    suite_regex: # optional, default is 
    # Enable to only annotate the results on the files, will not create a check run.
    annotate_only: # optional, default is false
    # Defines if the checks will include annotations (This is different than `annotate_only`).
    check_annotations: # optional, default is true
    # Defines if the active check should be updated instead
    update_check: # optional, default is false
    # Check name for test reports.
    check_name: # optional, default is JUnit Test Report
    # Commit SHA to update the check status.
    commit: # optional
    # Fail the build in case a test failure occurred.
    fail_on_failure: # optional, default is false
    # Fail if no test are found.
    require_tests: # optional, default is false
    # Fail if no passed test are found.
    require_passed_tests: # optional, default is false
    # Include passed tests in the report
    include_passed: # optional, default is false
    # Template to configure the title format. Placeholders: {{FILE_NAME}}, {{SUITE_NAME}}, {{TEST_NAME}}.
    check_title_template: # optional
    # Additional text to summary output
    summary: # optional, default is 
    # If a testcase is retried, ignore the original failure.
    check_retries: # optional, default is false
    # Provide a regex pattern and target pattern
    transformers: # optional, default is []
    # Enables the publishing of a JOB_SUMMARY with the report.
    job_summary: # optional, default is true
    # Include table with all test results in summary
    detailed_summary: # optional
    # Annotate passed tests along with warning and failed ones
    annotate_notice: # optional
    # Enables the file globber to follow symlinks. Default: false
    follow_symlink: # optional
    # Specify the name of a check to update
    job_name: # optional, default is ${{ github.job }}
    # Specify the limit for annotations. This will also interrupt parsing all test-suites if the limit is reached.
    annotations_limit: # optional
    # 
    truncate_stack_traces: # optional, default is true
          
